<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://raahulsaxena.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://raahulsaxena.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-14T09:35:33+00:00</updated><id>https://raahulsaxena.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Branching Out A Deep Dive into Binary Trees</title><link href="https://raahulsaxena.github.io/blog/2025/binary-tree/" rel="alternate" type="text/html" title="Branching Out A Deep Dive into Binary Trees"/><published>2025-03-13T15:09:00+00:00</published><updated>2025-03-13T15:09:00+00:00</updated><id>https://raahulsaxena.github.io/blog/2025/binary-tree</id><content type="html" xml:base="https://raahulsaxena.github.io/blog/2025/binary-tree/"><![CDATA[<p>Binary trees are a fundamental data structure in computer science, often used in various applications ranging from databases to operating systems. Understanding the different types of problems and patterns associated with binary trees is essential for anyone looking to master data structures and algorithms. In this guide, we will explore key binary tree problem patterns and provide examples for each.</p> <h3 id="prerequisites">Prerequisites</h3> <p>Before diving into binary tree problems, it’s important to have a solid grasp of the following concepts:</p> <ul> <li><strong>Recursion</strong></li> <li><strong>Stack and Queue data structures</strong></li> <li><strong>Tree Traversals (Inorder, Preorder, Postorder)</strong></li> </ul> <h2 id="important-binary-tree-patterns">Important Binary Tree Patterns</h2> <h2 id="pattern-1-tree-traversals">Pattern 1: Tree Traversals</h2> <h3 id="overview">Overview:</h3> <p>Tree traversals are fundamental operations in binary trees, where each node in the tree is visited in a systematic way. The most common traversals are Inorder, Preorder, and Postorder.</p> <p><strong>Problems:</strong></p> <ul> <li><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/description/">Inorder Traversal</a> (Iterative and Recursive)</li> <li><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/description/">Preorder Traversal</a> (Iterative and Recursive)</li> <li><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/description/">Postorder Traversal</a> (Iterative and Recursive)</li> <li><a href="https://leetcode.com/problems/recover-binary-search-tree/">Morris Inorder Traversal</a></li> <li><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/description/">Morris Preorder Traversal</a></li> </ul> <p><strong>Code Example (Inorder Traversal - Iterative):</strong></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Iterative Inorder Traversal in C++</span>
<span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stack&gt;</span><span class="cp">
</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">inorderTraversal</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">*&gt;</span> <span class="n">stack</span><span class="p">;</span>
    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
    
    <span class="k">while</span> <span class="p">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="nb">nullptr</span> <span class="o">||</span> <span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">curr</span><span class="p">);</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="n">result</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">curr</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="pattern-2-level-order-traversal">Pattern 2: Level Order Traversal</h2> <p><strong>Overview:</strong> Level Order Traversal, also known as Breadth-First Search (BFS) for trees, involves visiting all the nodes level by level, from left to right. It’s commonly used to solve problems where you need to examine nodes on the same level of the tree.</p> <p><strong>Key Points:</strong></p> <ul> <li>Use a queue to keep track of nodes at the current level.</li> <li>Process nodes level by level, adding their children to the queue.</li> <li>This approach is particularly useful for problems that involve hierarchical data.</li> </ul> <p><strong>Problems:</strong></p> <ul> <li><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/description/">Level Order Traversal</a></li> <li><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/">Zigzag Level Order Traversal</a></li> <li><a href="https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/description/">Vertical Order Traversal</a></li> <li><a href="https://leetcode.com/problems/binary-tree-right-side-view/description/">Binary Tree Right Side View</a></li> </ul> <p><strong>Code Example (Level Order Traversal):</strong></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Level Order Traversal in C++</span>
<span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">levelOrder</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span> <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
    
    <span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">*&gt;</span> <span class="n">q</span><span class="p">;</span>
    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
    
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">level</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">TreeNode</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
            <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="n">level</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">result</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">level</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="explanation">Explanation:</h3> <p>• A queue is used to store nodes of the tree. • The size of the queue at each level is captured to determine the number of nodes on that level. • Nodes are processed one level at a time, and their children are added to the queue for the next level.</p> <h2 id="pattern-3-views-of-binary-tree">Pattern 3: Views of Binary Tree</h2> <p><strong>Overview:</strong> The “views” of a binary tree refer to the nodes that are visible when the tree is viewed from different perspectives: top, left, right, and boundary views. These problems require traversing the tree in a way that simulates how the tree would look from a specific direction.</p> <p><strong>Key Points:</strong></p> <ul> <li><strong>Top View:</strong> Nodes visible when the tree is viewed from the top.</li> <li><strong>Left View:</strong> Nodes visible when the tree is viewed from the left side.</li> <li><strong>Right View:</strong> Nodes visible when the tree is viewed from the right side.</li> <li><strong>Boundary View:</strong> Combination of the left boundary, leaves, and right boundary.</li> </ul> <p><strong>Problems:</strong></p> <ul> <li><a href="https://www.geeksforgeeks.org/problems/top-view-of-binary-tree/1">Top View of Binary Tree</a></li> <li><a href="https://www.geeksforgeeks.org/problems/left-view-of-binary-tree/1">Left View of Binary Tree</a></li> <li><a href="https://leetcode.com/problems/binary-tree-right-side-view/description/">Binary Tree Right Side View</a></li> <li><a href="https://leetcode.com/problems/boundary-of-binary-tree/description/">Boundary of a Binary Tree</a></li> </ul> <p><strong>Code Example (Right Side View):</strong></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Right Side View of Binary Tree in C++</span>
<span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">rightSideView</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span> <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
    
    <span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">*&gt;</span> <span class="n">q</span><span class="p">;</span>
    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
    
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">TreeNode</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
            <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">result</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span> <span class="c1">// Last node on this level</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="explanation-1">Explanation:</h3> <p>• A queue is used for level-order traversal. • For the right side view, the last node of each level is added to the result. • Similar approaches can be adapted for top, left, and boundary views, with modifications to focus on the specific nodes that should be visible.</p> <h2 id="pattern-4-binary-tree-properties-and-depth-calculations">Pattern 4: Binary Tree Properties and Depth Calculations</h2> <p><strong>Overview:</strong> Binary tree properties and depth calculations involve determining various metrics related to the structure of a tree, such as its depth, height, diameter, and width. These problems often require recursive approaches to traverse the tree and calculate the desired properties.</p> <p><strong>Key Points:</strong></p> <ul> <li><strong>Maximum/Minimum Depth:</strong> The number of nodes along the longest/shortest path from the root node down to the farthest/nearest leaf node.</li> <li><strong>Balanced Binary Tree:</strong> A binary tree is balanced if the depth of the two subtrees of every node never differs by more than one.</li> <li><strong>Diameter:</strong> The length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</li> <li><strong>Width:</strong> The maximum number of nodes at any level of the binary tree.</li> </ul> <p><strong>Problems:</strong></p> <ul> <li><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/">Maximum Depth of Binary Tree</a></li> <li><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/description/">Minimum Depth of Binary Tree</a></li> <li><a href="https://leetcode.com/problems/balanced-binary-tree/">Balanced Binary Tree</a></li> <li><a href="https://leetcode.com/problems/diameter-of-binary-tree/description/">Diameter of Binary Tree</a></li> <li><a href="https://leetcode.com/problems/maximum-width-of-binary-tree/description/">Maximum Width of Binary Tree</a></li> <li><a href="https://leetcode.com/problems/invert-binary-tree/description/">Invert Binary Tree</a></li> <li><a href="https://leetcode.com/problems/find-leaves-of-binary-tree/description/">Find Leaves of Binary Tree</a></li> <li><a href="https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/">Maximum Level Sum of a Binary Tree</a></li> <li><a href="https://leetcode.com/problems/deepest-leaves-sum/description/">Deepest Leaves Sum</a></li> </ul> <p><strong>Code Example (Maximum Depth of Binary Tree):</strong></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Maximum Depth of Binary Tree in C++</span>
<span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">maxDepth</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">leftDepth</span> <span class="o">=</span> <span class="n">maxDepth</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">rightDepth</span> <span class="o">=</span> <span class="n">maxDepth</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">leftDepth</span><span class="p">,</span> <span class="n">rightDepth</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="explanation-2">Explanation:</h3> <p>• Maximum Depth: This is calculated by recursively finding the depth of the left and right subtrees and returning the maximum of the two, plus one for the current node. • Balanced Binary Tree: For checking if a tree is balanced, you can calculate the depth of each subtree and ensure that the difference is no more than one at every node. • Diameter: To find the diameter, calculate the depth of left and right subtrees for each node and track the maximum sum of these depths across all nodes. • Width: Use level order traversal to count the number of nodes at each level and keep track of the maximum.</p> <h2 id="pattern-5-lowest-common-ancestor-lca">Pattern 5: Lowest Common Ancestor (LCA)</h2> <p><strong>Overview:</strong> The Lowest Common Ancestor (LCA) of two nodes in a binary tree is the deepest node that is an ancestor of both nodes. This concept is widely used in problems involving relationships between nodes in a tree, such as finding common ancestors or determining hierarchical structures.</p> <p><strong>Key Points:</strong></p> <ul> <li><strong>LCA in Binary Tree:</strong> In a general binary tree, the LCA is found by recursively traversing the tree. If a node matches one of the target nodes, it’s returned as a potential LCA.</li> <li><strong>LCA in Binary Search Tree (BST):</strong> In a BST, the LCA can be found more efficiently by leveraging the properties of the BST. The search is guided by comparing node values.</li> <li><strong>Applications:</strong> LCA problems are often used in scenarios involving hierarchical data, such as organizational charts, genealogical trees, and file systems.</li> </ul> <p><strong>Problems:</strong></p> <ul> <li><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/">Lowest Common Ancestor of a Binary Tree</a></li> <li><a href="https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/description/">Maximum Difference Between Node and Ancestor</a></li> <li><a href="https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/description/">Lowest Common Ancestor of Deepest Leaves</a></li> <li><a href="https://leetcode.com/problems/kth-ancestor-of-a-tree-node/description/">Kth Ancestor of a Tree Node</a></li> </ul> <p><strong>Code Example (LCA in a Binary Tree):</strong></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Lowest Common Ancestor in a Binary Tree in C++</span>
<span class="n">TreeNode</span><span class="o">*</span> <span class="nf">lowestCommonAncestor</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">,</span> <span class="n">TreeNode</span><span class="o">*</span> <span class="n">p</span><span class="p">,</span> <span class="n">TreeNode</span><span class="o">*</span> <span class="n">q</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="nb">nullptr</span> <span class="o">||</span> <span class="n">root</span> <span class="o">==</span> <span class="n">p</span> <span class="o">||</span> <span class="n">root</span> <span class="o">==</span> <span class="n">q</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">left</span> <span class="o">=</span> <span class="n">lowestCommonAncestor</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">right</span> <span class="o">=</span> <span class="n">lowestCommonAncestor</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">!=</span> <span class="nb">nullptr</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">left</span> <span class="o">!=</span> <span class="nb">nullptr</span> <span class="o">?</span> <span class="n">left</span> <span class="o">:</span> <span class="n">right</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="explanation-3">Explanation:</h3> <p>• Recursive Approach: The LCA is found by recursively searching the left and right subtrees. If both the left and right subtree contain one of the nodes, then the current node is the LCA. If only one subtree contains both nodes, that subtree contains the LCA. • Edge Cases: If either p or q is the root, then the root itself is the LCA. If both nodes are found in the same subtree, the LCA is in that subtree.</p> <h3 id="applications">Applications:</h3> <p>• Genealogical Trees: Finding the common ancestor of two individuals in a family tree. • Organizational Hierarchies: Determining the nearest common manager of two employees. • File Systems: Finding the common directory of two files in a file system.</p> <h2 id="pattern-6-rooted-path---root-to-leaf">Pattern 6: Rooted Path - Root to Leaf</h2> <p><strong>Overview:</strong> Rooted path problems involve finding and analyzing paths from the root node to leaf nodes in a binary tree. These problems often require calculating sums, checking for specific properties along the path, or generating all possible paths from the root to leaves.</p> <p><strong>Key Points:</strong></p> <ul> <li><strong>Root to Leaf Paths:</strong> These problems generally require traversing the tree to collect or analyze the data from the root to each leaf node.</li> <li><strong>Path Sum Calculations:</strong> Many problems involve calculating the sum of node values along a root-to-leaf path and checking against a target sum.</li> <li><strong>Backtracking:</strong> Often, backtracking is used to explore all possible paths from the root to the leaf nodes, making sure to revert changes to the path as you backtrack up the tree.</li> </ul> <p><strong>Problems:</strong></p> <ul> <li><a href="https://leetcode.com/problems/binary-tree-paths/description/">Binary Tree Paths</a></li> <li><a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/description/">Sum Root to Leaf Numbers</a></li> <li><a href="https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/description/">Pseudo-Palindromic Paths in a Binary Tree</a></li> <li><a href="https://leetcode.com/problems/path-sum-iii/description/">Path Sum III</a></li> </ul> <p><strong>Code Example (Binary Tree Paths):</strong></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Binary Tree Paths in C++</span>
<span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">findPaths</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">node</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">path</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">paths</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">node</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    
    <span class="n">path</span> <span class="o">+=</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">paths</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">path</span><span class="p">);</span> <span class="c1">// Leaf node</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">path</span> <span class="o">+=</span> <span class="s">"-&gt;"</span><span class="p">;</span>
        <span class="n">findPaths</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">paths</span><span class="p">);</span>
        <span class="n">findPaths</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">paths</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">binaryTreePaths</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">paths</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="p">)</span> <span class="n">findPaths</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">paths</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">paths</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="explanation-4">Explanation:</h3> <p>• Recursive Traversal: The tree is traversed recursively, constructing a path string as you go from the root to each leaf node. • Leaf Nodes: When a leaf node is reached (a node with no children), the constructed path is added to the list of paths. • Backtracking: After exploring one path, the function backtracks to explore alternative paths from the root to other leaf nodes.</p> <h3 id="applications-1">Applications:</h3> <p>• Path Generation: Generating all paths from the root to leaf nodes in hierarchical structures like file systems or organizational charts. • Sum Calculations: Problems that involve finding paths that sum up to a specific value, commonly used in financial or decision-making models.</p> <h2 id="pattern-7-tree-construction-and-conversion">Pattern 7: Tree Construction and Conversion</h2> <p><strong>Overview:</strong> Tree construction and conversion problems involve creating a binary tree from given traversal orders or converting a tree into a different structure. These problems often require a deep understanding of tree properties and traversal methods.</p> <p><strong>Key Points:</strong></p> <ul> <li><strong>Tree Construction from Traversals:</strong> These problems involve constructing a binary tree using given sequences of inorder, preorder, or postorder traversals.</li> <li><strong>Tree Conversion:</strong> These problems require transforming a binary tree into another structure, such as a linked list, string representation, or different binary tree form.</li> <li><strong>Recursive Approach:</strong> Tree construction typically involves recursive methods to correctly position nodes based on traversal orders.</li> </ul> <p><strong>Problems:</strong></p> <ul> <li><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/">Construct Binary Tree from Preorder and Inorder Traversal</a></li> <li><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/">Construct Binary Tree from Inorder and Postorder Traversal</a></li> <li><a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/description/">Flatten Binary Tree to Linked List</a></li> <li><a href="https://leetcode.com/problems/construct-string-from-binary-tree/description/">Construct String from Binary Tree</a></li> <li><a href="https://leetcode.com/problems/maximum-binary-tree/description/">Maximum Binary Tree</a></li> <li><a href="https://leetcode.com/problems/recover-a-tree-from-preorder-traversal/description/">Recover a Tree from Preorder Traversal</a></li> <li><a href="https://leetcode.com/problems/all-possible-full-binary-trees/description/">All Possible Full Binary Trees</a></li> </ul> <p><strong>Code Example (Construct Binary Tree from Preorder and Inorder Traversal):</strong></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Construct Binary Tree from Preorder and Inorder Traversal in C++</span>
<span class="cp">#include</span> <span class="cpf">&lt;unordered_map&gt;</span><span class="cp">
</span>
<span class="n">TreeNode</span><span class="o">*</span> <span class="nf">buildTreeHelper</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">preorder</span><span class="p">,</span> <span class="kt">int</span> <span class="n">preStart</span><span class="p">,</span> <span class="kt">int</span> <span class="n">preEnd</span><span class="p">,</span>
                          <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">inorder</span><span class="p">,</span> <span class="kt">int</span> <span class="n">inStart</span><span class="p">,</span> <span class="kt">int</span> <span class="n">inEnd</span><span class="p">,</span>
                          <span class="n">std</span><span class="o">::</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">inorderMap</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">preStart</span> <span class="o">&gt;</span> <span class="n">preEnd</span> <span class="o">||</span> <span class="n">inStart</span> <span class="o">&gt;</span> <span class="n">inEnd</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">nullptr</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">rootVal</span> <span class="o">=</span> <span class="n">preorder</span><span class="p">[</span><span class="n">preStart</span><span class="p">];</span>
    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TreeNode</span><span class="p">(</span><span class="n">rootVal</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">rootIndex</span> <span class="o">=</span> <span class="n">inorderMap</span><span class="p">[</span><span class="n">rootVal</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">leftTreeSize</span> <span class="o">=</span> <span class="n">rootIndex</span> <span class="o">-</span> <span class="n">inStart</span><span class="p">;</span>

    <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">buildTreeHelper</span><span class="p">(</span><span class="n">preorder</span><span class="p">,</span> <span class="n">preStart</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">preStart</span> <span class="o">+</span> <span class="n">leftTreeSize</span><span class="p">,</span>
                                 <span class="n">inorder</span><span class="p">,</span> <span class="n">inStart</span><span class="p">,</span> <span class="n">rootIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">inorderMap</span><span class="p">);</span>
    <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">buildTreeHelper</span><span class="p">(</span><span class="n">preorder</span><span class="p">,</span> <span class="n">preStart</span> <span class="o">+</span> <span class="n">leftTreeSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">preEnd</span><span class="p">,</span>
                                  <span class="n">inorder</span><span class="p">,</span> <span class="n">rootIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">inEnd</span><span class="p">,</span> <span class="n">inorderMap</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">TreeNode</span><span class="o">*</span> <span class="nf">buildTree</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">preorder</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">inorder</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">inorderMap</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">inorder</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">inorderMap</span><span class="p">[</span><span class="n">inorder</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nf">buildTreeHelper</span><span class="p">(</span><span class="n">preorder</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">preorder</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span>
                           <span class="n">inorder</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">inorder</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">inorderMap</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div> <h3 id="explanation-5">Explanation:</h3> <p>• Mapping Inorder Indices: A hash map is used to store the indices of values in the inorder traversal, allowing for quick lookups when dividing the tree into left and right subtrees. • Recursive Construction: The tree is constructed recursively by determining the root node from the preorder traversal and dividing the inorder traversal into left and right subtrees. • Handling Subtrees: The left and right subtrees are recursively constructed using the corresponding segments of the preorder and inorder traversals.</p> <h3 id="applications-2">Applications:</h3> <p>• Tree Reconstruction: Building a binary tree from traversal data, which is common in parsing tasks, compilers, and data reconstruction. • Tree Transformation: Converting trees into different forms, such as linked lists, strings, or arrays, for use in various algorithms and data processing tasks.</p> <h2 id="pattern-8-advanced-binary-tree-problems">Pattern 8: Advanced Binary Tree Problems</h2> <p><strong>Overview:</strong> Advanced binary tree problems often combine multiple concepts and require deep insights into the structure and properties of binary trees. These problems may involve complex operations such as finding the maximum path sum, serializing and deserializing trees, or placing binary tree cameras to monitor nodes. They typically require a mix of traversal techniques, dynamic programming, and advanced recursion.</p> <p><strong>Key Points:</strong></p> <ul> <li><strong>Maximum Path Sum:</strong> Finding the path in a binary tree where the sum of node values is the highest. This path may start and end at any node.</li> <li><strong>Serialization and Deserialization:</strong> Converting a binary tree into a format that can be stored or transmitted and then reconstructing the tree from that format.</li> <li><strong>Binary Tree Cameras:</strong> Placing cameras in the tree to monitor all nodes with the fewest number of cameras, usually involves dynamic programming or greedy approaches.</li> <li><strong>Combination of Concepts:</strong> Problems in this category often require combining basic tree operations with more advanced techniques like dynamic programming, backtracking, or even graph algorithms.</li> </ul> <p><strong>Problems:</strong></p> <ul> <li><a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/description/">Binary Tree Maximum Path Sum</a></li> <li><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/description/">Serialize and Deserialize Binary Tree</a></li> <li><a href="https://leetcode.com/problems/binary-tree-cameras/">Binary Tree Cameras</a></li> <li><a href="https://leetcode.com/problems/recover-binary-search-tree/">Recover Binary Search Tree</a></li> </ul> <p><strong>Code Example (Binary Tree Maximum Path Sum):</strong></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Binary Tree Maximum Path Sum in C++</span>
<span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">maxPathSumHelper</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">maxSum</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="kt">int</span> <span class="n">leftGain</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">maxPathSumHelper</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">maxSum</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">rightGain</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">maxPathSumHelper</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">maxSum</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
    
    <span class="kt">int</span> <span class="n">priceNewPath</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">+</span> <span class="n">leftGain</span> <span class="o">+</span> <span class="n">rightGain</span><span class="p">;</span>
    
    <span class="n">maxSum</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">maxSum</span><span class="p">,</span> <span class="n">priceNewPath</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">leftGain</span><span class="p">,</span> <span class="n">rightGain</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">maxPathSum</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">maxSum</span> <span class="o">=</span> <span class="n">INT_MIN</span><span class="p">;</span>
    <span class="n">maxPathSumHelper</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">maxSum</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">maxSum</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="explanation-6">Explanation:</h3> <p>• Recursive Helper Function: The helper function calculates the maximum gain from the left and right subtrees. It ensures that if a subtree’s gain is negative, it is discarded (i.e., treated as 0). • Calculating the Path Sum: The path sum for the current node is calculated by adding the node’s value to the maximum gains from the left and right subtrees. • Updating the Maximum Sum: The global maximum path sum is updated if the current path sum is higher than the previously recorded maximum. • Return Value: The function returns the maximum gain that can be obtained by continuing the path through either the left or right subtree.</p> <h3 id="applications-3">Applications:</h3> <p>• Optimal Substructure Problems: Advanced binary tree problems often require finding optimal substructures, such as the maximum path sum that can be formed by combining multiple subtrees. • Data Compression and Transmission: Serialization and deserialization are key in transmitting tree data over networks or storing it in a compressed format. • Security and Monitoring: Placing cameras or other monitoring devices efficiently in hierarchical structures, ensuring minimal coverage overlaps.</p>]]></content><author><name></name></author><category term="problem-solving"/><category term="leetcode"/><summary type="html"><![CDATA[Binary trees are the backbone of countless algorithms. In this blog, we’ll explore their structure, traversal techniques.]]></summary></entry><entry><title type="html">Let’s do Dynamic Programming</title><link href="https://raahulsaxena.github.io/blog/2025/dp-study-plan/" rel="alternate" type="text/html" title="Let’s do Dynamic Programming"/><published>2025-03-13T15:09:00+00:00</published><updated>2025-03-13T15:09:00+00:00</updated><id>https://raahulsaxena.github.io/blog/2025/dp-study-plan</id><content type="html" xml:base="https://raahulsaxena.github.io/blog/2025/dp-study-plan/"><![CDATA[<p>This page is continually updated with new and improved content to ensure the best curation for Dynamic Programming problems.</p> <h2 id="important-links">Important Links:</h2> <ul> <li>Source : Striver SDE Sheet,</li> <li><a href="https://www.reddit.com/r/leetcode/comments/14o10jd/the_ultimate_dynamic_programming_roadmap/">Ultimate Dynamic Programming Roadmap</a></li> <li><a href="https://www.youtube.com/watch?v=9k31KcQmS_U&amp;ab_channel=AlgoMonster">Youtube Link</a> <a href="https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns">- DP Patterns (Coded)</a></li> <li><a href="https://leetcode.com/discuss/study-guide/1000929/solved-all-dynamic-programming-dp-problems-in-7-months">All DP Problems sorted patterwise</a></li> </ul> <h2 id="pattern-1-01-knapsack-bounded">Pattern 1: 0/1 Knapsack (Bounded)</h2> <p>Solution is built upon subset, but with few more restrictions. For example you want to complete some courses, they have some reward points associated. But you can attend only k number of courses. Now try to maximize your points. This type of problems are just an extension to simple DP, where you add one more dimension to consider provided restriction.</p> <h3 id="problems">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/partition-equal-subset-sum/">Partition Equal Subset Sum</a></li> <li><a href="https://leetcode.com/problems/last-stone-weight-ii/">Last Stone Weight II</a></li> <li><a href="https://leetcode.com/problems/target-sum/">Target Sum</a></li> </ul> <h2 id="pattern-2-01-knapsack-unbounded">Pattern 2: 0/1 Knapsack (Unbounded)</h2> <p>Dp state is similar to the classical knapsack problem.</p> <h3 id="problems-1">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/coin-change/description/">Coin Change I</a></li> <li><a href="https://leetcode.com/problems/coin-change-ii/description/">Coin Change II</a></li> </ul> <h2 id="pattern-3-fibonacci-or-linear-dp">Pattern 3: Fibonacci (or Linear DP)</h2> <p>You just need to find the repetitive part of the solution and improve it by saving its result.</p> <p>Dp solution requires us to solve the sub problem on every prefix of the array. A prefix of the array is a subarray from 0 to i for some i.</p> <h3 id="problems-2">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/fibonacci-number/">Fibonacci Number</a></li> <li><a href="https://leetcode.com/problems/climbing-stairs/">Climbing Stairs</a></li> <li><a href="https://leetcode.com/problems/min-cost-climbing-stairs/">Min Cost Climbing Stairs</a></li> <li><a href="https://leetcode.com/problems/house-robber/">House Robber I</a></li> <li><a href="https://leetcode.com/problems/house-robber-ii/">House Robber II</a></li> <li><a href="https://leetcode.com/problems/decode-ways/">Decode Ways</a></li> </ul> <h2 id="pattern-4-string-dp">Pattern 4: String DP</h2> <h3 id="problems-3">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/is-subsequence/">Is Subsequence</a></li> <li><a href="https://leetcode.com/problems/palindrome-partitioning/">Palindromic Partitioning I</a></li> <li><a href="https://leetcode.com/problems/palindrome-partitioning-ii/">Palindromic Partitioning II</a></li> <li><a href="https://leetcode.com/problems/word-break/">Word Break</a></li> <li><a href="https://leetcode.com/problems/longest-valid-parentheses/">Longest Valid Parentheses</a></li> <li><a href="https://leetcode.com/problems/word-break-ii/">Word Break II</a></li> <li><a href="https://leetcode.com/problems/concatenated-words/description/">Concatenated Words</a></li> <li><a href="https://leetcode.com/problems/distinct-subsequences/description/">Distinct Subsequences</a></li> </ul> <h2 id="pattern-5-longest-common-subsequence-lcs-string-dp">Pattern 5: Longest Common Subsequence (LCS) [String DP]</h2> <h3 id="problems-4">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/longest-common-subsequence/">Longest Common Subsequence</a></li> <li><a href="https://leetcode.com/problems/maximum-length-of-repeated-subarray/">Maximum length of repeated Subarray</a></li> <li><a href="https://leetcode.com/problems/edit-distance/description/?envType=problem-list-v2&amp;envId=55afh7m7">Edit Distance</a></li> <li><a href="https://leetcode.com/problems/interleaving-string/">Interleaving String</a></li> <li><a href="https://leetcode.com/problems/longest-happy-string/description/">Longest Happy String</a></li> <li><a href="https://leetcode.com/problems/longest-string-chain/description/">Longest String Chain</a></li> <li><a href="https://leetcode.com/problems/shortest-common-supersequence/">Shortest Common Supersequence</a></li> <li><a href="https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/">Minimum Insertion Steps to Make a String Palindrome</a></li> </ul> <h2 id="pattern-6-palindromes-lcs">Pattern 6: Palindromes (LCS)</h2> <h3 id="problems-5">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/longest-palindromic-substring/">Longest Palindromic Substring</a></li> <li><a href="https://leetcode.com/problems/longest-palindromic-subsequence/">Longest Palindromic Subsequence</a></li> <li><a href="https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/">Minimum Insertion Steps to make a string Palindrome</a></li> <li><a href="https://leetcode.com/problems/valid-palindrome-iii/">Valid Palindrome III</a></li> <li><a href="https://leetcode.com/problems/palindromic-substrings/">Palindromic Substrings</a></li> </ul> <h2 id="pattern-7-longest-increasing-subsequence-lis">Pattern 7: Longest Increasing Subsequence (LIS)</h2> <p>Dp problem is solved on every prefix of the array. Transition is from every index j &lt; i.</p> <h3 id="problems-6">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/longest-increasing-subsequence/">Longest Increasing Subsequence</a></li> <li><a href="https://leetcode.com/problems/russian-doll-envelopes/">Russian Doll Envelops</a></li> <li><a href="https://leetcode.com/problems/number-of-longest-increasing-subsequence/">Number of Longest Increasing Subsequence</a></li> <li><a href="https://leetcode.com/problems/make-array-strictly-increasing/description/">Make Array Strictly Increasing</a></li> </ul> <h2 id="pattern-8-matrix-chain-multiplication">Pattern 8: Matrix Chain Multiplication</h2> <p>Dp problem is solved on every single interval (subarray) of the array.</p> <h3 id="problems-7">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/remove-boxes/">Remove Boxes</a></li> <li><a href="https://leetcode.com/problems/unique-binary-search-trees/">Unique Binary Search Trees</a></li> <li><a href="https://leetcode.com/problems/burst-balloons/">Burst Balloons</a></li> <li><a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/">Minimum Cost Tree from Leaf Values</a></li> </ul> <h2 id="pattern-9-kadanes-algorithm">Pattern 9: Kadane’s Algorithm</h2> <h3 id="problems-8">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">Best Time to Buy and Sell Stock</a></li> <li><a href="https://leetcode.com/problems/maximum-subarray/">Maximum Subarray</a></li> <li><a href="https://leetcode.com/problems/maximum-product-subarray/">Maximum Product Subarray</a></li> <li><a href="https://leetcode.com/problems/longest-turbulent-subarray/description/">Longest Turbulent Subarray</a></li> <li><a href="https://leetcode.com/problems/largest-divisible-subset/description/">Largest Divisible Subset</a></li> </ul> <h2 id="pattern-10-dp-on-trees">Pattern 10: DP on Trees</h2> <h3 id="problems-9">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/binary-tree-cameras/description/">Binary Tree Cameras</a></li> <li><a href="https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/description/">Maximum Sum BST in Binary Tree</a></li> <li><a href="https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/description/">Longest ZigZag Path in a Binary Tree</a></li> <li><a href="https://leetcode.com/problems/house-robber-iii/description/">House Robber III</a></li> <li><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/description/">Unique Binary Search Trees II</a></li> </ul> <h2 id="pattern-11-grid-dp">Pattern 11: Grid DP</h2> <p>Dp table will have the same dimensions as grid, the state at cell i,j will be related to the grid at cell i,j.</p> <h3 id="problems-10">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/matrix-block-sum/">Matrix Block Sum</a></li> <li><a href="https://leetcode.com/problems/dungeon-game/">Dungeon Game</a></li> <li><a href="https://leetcode.com/problems/maximal-square/">Maximal Square</a></li> <li><a href="https://leetcode.com/problems/minimum-falling-path-sum/">Minimum Falling Path Sum</a></li> <li><a href="https://leetcode.com/problems/unique-paths/">Unique Paths</a></li> <li><a href="https://leetcode.com/problems/unique-paths-ii/">Unique Paths II</a></li> <li><a href="https://leetcode.com/problems/minimum-path-sum/">Minimum Path Sum</a></li> </ul> <h2 id="pattern-12-dp--bitmask">Pattern 12: DP + Bitmask</h2> <h3 id="problems-11">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/partition-to-k-equal-sum-subsets/">Partition to K equal Sum Subsets</a></li> <li><a href="https://leetcode.com/problems/stickers-to-spell-word/">Stickers to Spell Word</a></li> <li><a href="https://leetcode.com/problems/shortest-path-visiting-all-nodes/">Shortest Path Visiting All Nodes</a></li> </ul> <h2 id="pattern-13-graph-dp">Pattern 13: Graph DP</h2> <h3 id="problems-12">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/cheapest-flights-within-k-stops/">Cheapest Flights within K Stops</a></li> <li><a href="https://leetcode.com/problems/find-the-shortest-superstring/">Find the shortest superstring</a></li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="leetcode"/><summary type="html"><![CDATA[The best dynamic programming study plan (incl. questions)]]></summary></entry><entry><title type="html">Mastering Knapsack The Dynamic Programming Patterns You Need to Know</title><link href="https://raahulsaxena.github.io/blog/2025/knapsack-like/" rel="alternate" type="text/html" title="Mastering Knapsack The Dynamic Programming Patterns You Need to Know"/><published>2025-03-13T15:09:00+00:00</published><updated>2025-03-13T15:09:00+00:00</updated><id>https://raahulsaxena.github.io/blog/2025/knapsack-like</id><content type="html" xml:base="https://raahulsaxena.github.io/blog/2025/knapsack-like/"><![CDATA[<p>This pattern has two sub-patterns namely, 0-1 Knapsack and Unbounded Knapsack. Together, the type of problems that match these patterns are called “Knapsack-like” problems.</p> <h2 id="pattern-0-1-knapsack">Pattern: 0-1 Knapsack</h2> <h3 id="overview">Overview:</h3> <p>The 0/1 Knapsack pattern is one of the most fundamental dynamic programming problems. In this pattern, you are given a set of items, each with a weight and a value, and a knapsack with a limited capacity. The goal is to maximize the value of the items in the knapsack without exceeding its capacity. The “0/1” refers to the fact that each item can either be included in the knapsack (1) or excluded (0).</p> <p>This pattern can be extended to problems where you need to make decisions under constraints, such as selecting courses with a certain number of credit hours, choosing projects with a fixed number of resources, or dividing a set of numbers into subsets with equal sums.</p> <h3 id="key-concepts">Key Concepts:</h3> <ul> <li><strong>Decision Making:</strong> At each step, you must decide whether to include or exclude an item (or option) based on the problem’s constraints.</li> <li><strong>State Representation:</strong> The state is typically represented by the remaining capacity of the knapsack and the items under consideration.</li> <li><strong>Recursive Relation:</strong> The problem can be broken down recursively by considering two scenarios: including the current item or excluding it.</li> </ul> <h3 id="code-example-partition-equal-subset-sum">Code Example: Partition Equal Subset Sum</h3> <p>Let’s explore the “Partition Equal Subset Sum” problem, where we need to determine if a given set of numbers can be partitioned into two subsets with equal sums.</p> <p><strong>Problem Statement:</strong></p> <p>Given a non-empty array <code class="language-plaintext highlighter-rouge">nums</code> containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p> <p><strong>Code Implementation:</strong></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;numeric&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="kt">bool</span> <span class="nf">canPartition</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">totalSum</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">accumulate</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
    
    <span class="c1">// If the total sum is odd, it's impossible to partition it into two equal subsets</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">totalSum</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="n">totalSum</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">(</span><span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">));</span>
    
    <span class="c1">// Initialize DP table: we can always have a sum of 0 with an empty subset</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="c1">// Fill the DP table</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">||</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]];</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="n">target</span><span class="p">];</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">canPartition</span><span class="p">(</span><span class="n">nums</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Can partition into equal subsets."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Cannot partition into equal subsets."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="explanation">Explanation:</h3> <ol> <li><strong>State Representation:</strong> <ul> <li>The DP table <code class="language-plaintext highlighter-rouge">dp[i][j]</code> represents whether it is possible to achieve a sum <code class="language-plaintext highlighter-rouge">j</code> using the first <code class="language-plaintext highlighter-rouge">i</code> items.</li> </ul> </li> <li><strong>Base Case:</strong> <ul> <li>We can always achieve a sum of <code class="language-plaintext highlighter-rouge">0</code> by excluding all items, hence <code class="language-plaintext highlighter-rouge">dp[i][0] = true</code> for all <code class="language-plaintext highlighter-rouge">i</code>.</li> </ul> </li> <li><strong>Recursive Relation:</strong> <ul> <li>For each item <code class="language-plaintext highlighter-rouge">i</code> and target sum <code class="language-plaintext highlighter-rouge">j</code>, we have two choices: <ul> <li><strong>Exclude the current item:</strong> In this case, <code class="language-plaintext highlighter-rouge">dp[i][j] = dp[i-1][j]</code>.</li> <li><strong>Include the current item:</strong> Check if the remaining sum <code class="language-plaintext highlighter-rouge">j - nums[i-1]</code> can be achieved with the previous items, i.e., <code class="language-plaintext highlighter-rouge">dp[i][j] = dp[i-1][j-nums[i-1]]</code>.</li> </ul> </li> </ul> </li> <li><strong>Final Answer:</strong> <ul> <li>The final answer is stored in <code class="language-plaintext highlighter-rouge">dp[n][target]</code>, where <code class="language-plaintext highlighter-rouge">n</code> is the number of items and <code class="language-plaintext highlighter-rouge">target</code> is half of the total sum of the array.</li> </ul> </li> </ol> <h3 id="problems">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/partition-equal-subset-sum/">Partition Equal Subset Sum</a></li> <li><a href="https://leetcode.com/problems/last-stone-weight-ii/">Last Stone Weight II</a></li> <li><a href="https://leetcode.com/problems/target-sum/">Target Sum</a></li> </ul> <h2 id="pattern-2-unbounded-knapsack">Pattern 2: Unbounded Knapsack</h2> <h3 id="overview-1">Overview:</h3> <p>The Unbounded Knapsack pattern is a variation of the 0/1 Knapsack problem where you are allowed to include an unlimited number of instances of each item. This pattern is applicable in scenarios where repetition is allowed, such as cutting rods into pieces, making change with coins, or maximizing profit with unlimited resources.</p> <h3 id="key-concepts-1">Key Concepts:</h3> <ul> <li><strong>Decision Making:</strong> At each step, you must decide whether to include an item in the knapsack, and unlike the 0/1 Knapsack, you can include the same item multiple times.</li> <li><strong>State Representation:</strong> The state is represented by the current capacity of the knapsack and the items considered so far.</li> <li><strong>Recursive Relation:</strong> The recursive relationship accounts for the possibility of reusing the same item multiple times.</li> </ul> <h3 id="code-example-coin-change">Code Example: Coin Change</h3> <p>Let’s explore the “Coin Change” problem, where you need to determine the minimum number of coins needed to make up a given amount.</p> <p><strong>Problem Statement:</strong></p> <p>Given an array of integers <code class="language-plaintext highlighter-rouge">coins</code> representing different denominations of coins and an integer <code class="language-plaintext highlighter-rouge">amount</code> representing a total amount of money, return the fewest number of coins needed to make up that amount. If that amount cannot be made up by any combination of the coins, return <code class="language-plaintext highlighter-rouge">-1</code>.</p> <p><strong>Code Implementation:</strong></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;climits&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">coinChange</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">coins</span><span class="p">,</span> <span class="kt">int</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">amount</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">INT_MAX</span><span class="p">);</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// Base case: To make 0 amount, 0 coins are needed</span>
    
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">amount</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">coin</span> <span class="o">:</span> <span class="n">coins</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">coin</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">coin</span><span class="p">]</span> <span class="o">!=</span> <span class="n">INT_MAX</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">coin</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">amount</span><span class="p">]</span> <span class="o">==</span> <span class="n">INT_MAX</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="n">dp</span><span class="p">[</span><span class="n">amount</span><span class="p">];</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">coins</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
    <span class="kt">int</span> <span class="n">amount</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">coinChange</span><span class="p">(</span><span class="n">coins</span><span class="p">,</span> <span class="n">amount</span><span class="p">);</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Minimum coins required: "</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Amount cannot be made with given coins."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div> <h3 id="explanation-1">Explanation:</h3> <ol> <li><strong>State Representation:</strong> <ul> <li>The DP array <code class="language-plaintext highlighter-rouge">dp[i]</code> represents the minimum number of coins needed to make the amount <code class="language-plaintext highlighter-rouge">i</code>.</li> </ul> </li> <li><strong>Base Case:</strong> <ul> <li>To make the amount <code class="language-plaintext highlighter-rouge">0</code>, <code class="language-plaintext highlighter-rouge">0</code> coins are needed, so <code class="language-plaintext highlighter-rouge">dp[0] = 0</code>.</li> </ul> </li> <li><strong>Recursive Relation:</strong> <ul> <li>For each amount <code class="language-plaintext highlighter-rouge">i</code>, we iterate over all the coins. If <code class="language-plaintext highlighter-rouge">i - coin &gt;= 0</code>, then <code class="language-plaintext highlighter-rouge">dp[i]</code> can be updated as <code class="language-plaintext highlighter-rouge">dp[i] = std::min(dp[i], dp[i - coin] + 1)</code>. This checks if the current coin can contribute to the solution and updates the minimum coins needed.</li> </ul> </li> <li><strong>Final Answer:</strong> <ul> <li>The final answer is stored in <code class="language-plaintext highlighter-rouge">dp[amount]</code>. If it’s still <code class="language-plaintext highlighter-rouge">INT_MAX</code>, then the amount cannot be made with the given coins, so return <code class="language-plaintext highlighter-rouge">-1</code>.</li> </ul> </li> </ol> <h3 id="problems-1">Problems:</h3> <ul> <li><a href="https://leetcode.com/problems/coin-change/">Coin Change</a></li> <li><a href="https://www.geeksforgeeks.org/cutting-a-rod-dp-13/">Rod Cutting</a></li> <li><a href="https://www.geeksforgeeks.org/unbounded-knapsack-repetition-items-allowed/">Unbounded Knapsack</a></li> </ul>]]></content><author><name></name></author><category term="problem-solving"/><category term="leetcode"/><summary type="html"><![CDATA[Knapsack problems are a cornerstone of dynamic programming, appearing in countless algorithmic challenges. In this guide, we break down the 0-1 Knapsack and Unbounded Knapsack patterns]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://raahulsaxena.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://raahulsaxena.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://raahulsaxena.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with jupyter notebook</title><link href="https://raahulsaxena.github.io/blog/2023/jupyter-notebook/" rel="alternate" type="text/html" title="a post with jupyter notebook"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>https://raahulsaxena.github.io/blog/2023/jupyter-notebook</id><content type="html" xml:base="https://raahulsaxena.github.io/blog/2023/jupyter-notebook/"><![CDATA[<p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown}
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'assets/jupyter/blog.ipynb'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">relative_url</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">file_exists</span><span class="w"> </span>assets/jupyter/blog.ipynb<span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'true'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{%</span><span class="w"> </span><span class="nt">jupyter_notebook</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">%}</span>
  &lt;p&gt;Sorry, the notebook you are looking for does not exist.&lt;/p&gt;
<span class="cp">{%</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">%}</span>
{:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/blog.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="jupyter"/><summary type="html"><![CDATA[an example of a blog post with jupyter notebook]]></summary></entry><entry><title type="html">a post with custom blockquotes</title><link href="https://raahulsaxena.github.io/blog/2023/custom-blockquotes/" rel="alternate" type="text/html" title="a post with custom blockquotes"/><published>2023-05-12T19:53:00+00:00</published><updated>2023-05-12T19:53:00+00:00</updated><id>https://raahulsaxena.github.io/blog/2023/custom-blockquotes</id><content type="html" xml:base="https://raahulsaxena.github.io/blog/2023/custom-blockquotes/"><![CDATA[<p>This post shows how to add custom styles for blockquotes. Based on <a href="https://github.com/sighingnow/jekyll-gitbook">jekyll-gitbook</a> implementation.</p> <p>We decided to support the same custom blockquotes as in <a href="https://sighingnow.github.io/jekyll-gitbook/jekyll/2022-06-30-tips_warnings_dangers.html">jekyll-gitbook</a>, which are also found in a lot of other sites’ styles. The styles definitions can be found on the <a href="https://github.com/alshedivat/al-folio/blob/main/_sass/_base.scss">_base.scss</a> file, more specifically:</p> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Tips, warnings, and dangers */</span>
<span class="nc">.post</span> <span class="nc">.post-content</span> <span class="nt">blockquote</span> <span class="p">{</span>
  <span class="k">&amp;</span><span class="nc">.block-tip</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-warning</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-danger</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>A regular blockquote can be used as following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; This is a regular blockquote</span>
<span class="gt">&gt; and it can be used as usual</span>
</code></pre></div></div> <blockquote> <p>This is a regular blockquote and it can be used as usual</p> </blockquote> <p>These custom styles can be used by adding the specific class to the blockquote, as follows:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### TIP</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; A tip can be used when you want to give advice</span>
<span class="gt">&gt; related to a certain content.</span>
{: .block-tip }
</code></pre></div></div> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>A tip can be used when you want to give advice related to a certain content.</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote> ]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="blockquotes"/><summary type="html"><![CDATA[an example of a blog post with custom blockquotes]]></summary></entry><entry><title type="html">a post with table of contents on a sidebar</title><link href="https://raahulsaxena.github.io/blog/2023/sidebar-table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents on a sidebar"/><published>2023-04-25T14:14:00+00:00</published><updated>2023-04-25T14:14:00+00:00</updated><id>https://raahulsaxena.github.io/blog/2023/sidebar-table-of-contents</id><content type="html" xml:base="https://raahulsaxena.github.io/blog/2023/sidebar-table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents as a sidebar.</p> <h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2> <p>To add a table of contents to a post as a sidebar, simply add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post. If you wish to display the sidebar to the right, simply change <code class="language-plaintext highlighter-rouge">left</code> to <code class="language-plaintext highlighter-rouge">right</code>.</p> <h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h2 id="customizing-your-table-of-contents">Customizing Your Table of Contents</h2> <p data-toc-text="Customizing">If you want to learn more about how to customize the table of contents of your sidebar, you can check the <a href="https://afeld.github.io/bootstrap-toc/">bootstrap-toc</a> documentation. Notice that you can even customize the text of the heading that will be displayed on the sidebar.</p> <h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="toc"/><category term="sidebar"/><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry><entry><title type="html">displaying beautiful tables with Bootstrap Tables</title><link href="https://raahulsaxena.github.io/blog/2023/tables/" rel="alternate" type="text/html" title="displaying beautiful tables with Bootstrap Tables"/><published>2023-03-20T18:37:00+00:00</published><updated>2023-03-20T18:37:00+00:00</updated><id>https://raahulsaxena.github.io/blog/2023/tables</id><content type="html" xml:base="https://raahulsaxena.github.io/blog/2023/tables/"><![CDATA[<p>Using markdown to display tables is easy.</p> <h2 id="simple-example">Simple Example</h2> <p>First, add the following to the post’s front matter</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pretty_table</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>Then, the following syntax</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       |    center 1    |       right 1 |
| Left 2       |    center 2    |       right 2 |
| Left 3       |    center 3    |       right 3 |
</code></pre></div></div> <p>will generate</p> <table> <thead> <tr> <th style="text-align: left">Left aligned</th> <th style="text-align: center">Center aligned</th> <th style="text-align: right">Right aligned</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Left 1</td> <td style="text-align: center">center 1</td> <td style="text-align: right">right 1</td> </tr> <tr> <td style="text-align: left">Left 2</td> <td style="text-align: center">center 2</td> <td style="text-align: right">right 2</td> </tr> <tr> <td style="text-align: left">Left 3</td> <td style="text-align: center">center 3</td> <td style="text-align: right">right 3</td> </tr> </tbody> </table> <p></p> <h2 id="html-example">HTML Example</h2> <p>It is also possible to use HTML to display tables. For example, the following HTML code will display a table with <a href="https://bootstrap-table.com/">Bootstrap Table</a>, loaded from a JSON file:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span> <span class="na">id=</span><span class="s">"table"</span> <span class="na">data-toggle=</span><span class="s">"table"</span> <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div> <table data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-field="id">ID</th> <th data-field="name">Item Name</th> <th data-field="price">Item Price</th> </tr> </thead> </table> <p></p> <h2 id="more-complex-example">More Complex Example</h2> <p>By using <a href="https://bootstrap-table.com/">Bootstrap Table</a> it is possible to create pretty complex tables, with pagination, search, and more. For example, the following HTML code will display a table, loaded from a JSON file, with pagination, search, checkboxes, and header/content alignment. For more information, check the <a href="https://examples.bootstrap-table.com/index.html">documentation</a>.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span>
  <span class="na">data-click-to-select=</span><span class="s">"true"</span>
  <span class="na">data-height=</span><span class="s">"460"</span>
  <span class="na">data-pagination=</span><span class="s">"true"</span>
  <span class="na">data-search=</span><span class="s">"true"</span>
  <span class="na">data-toggle=</span><span class="s">"table"</span>
  <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span>
<span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-checkbox=</span><span class="s">"true"</span><span class="nt">&gt;&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span> <span class="na">data-halign=</span><span class="s">"left"</span> <span class="na">data-align=</span><span class="s">"center"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span> <span class="na">data-halign=</span><span class="s">"center"</span> <span class="na">data-align=</span><span class="s">"right"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span> <span class="na">data-halign=</span><span class="s">"right"</span> <span class="na">data-align=</span><span class="s">"left"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div> <table data-click-to-select="true" data-height="460" data-pagination="true" data-search="true" data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-checkbox="true"></th> <th data-field="id" data-halign="left" data-align="center" data-sortable="true">ID</th> <th data-field="name" data-halign="center" data-align="right" data-sortable="true">Item Name</th> <th data-field="price" data-halign="right" data-align="left" data-sortable="true">Item Price</th> </tr> </thead> </table>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="tables"/><summary type="html"><![CDATA[an example of how to use Bootstrap Tables]]></summary></entry><entry><title type="html">a post with table of contents</title><link href="https://raahulsaxena.github.io/blog/2023/table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents"/><published>2023-03-20T15:59:00+00:00</published><updated>2023-03-20T15:59:00+00:00</updated><id>https://raahulsaxena.github.io/blog/2023/table-of-contents</id><content type="html" xml:base="https://raahulsaxena.github.io/blog/2023/table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents in the beginning of the post.</p> <h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2> <p>To add a table of contents to a post, simply add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post.</p> <h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h2 id="table-of-contents-options">Table of Contents Options</h2> <p>If you want to learn more about how to customize the table of contents, you can check the <a href="https://github.com/toshimaru/jekyll-toc">jekyll-toc</a> repository.</p> <h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="toc"/><summary type="html"><![CDATA[an example of a blog post with table of contents]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://raahulsaxena.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://raahulsaxena.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://raahulsaxena.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website! 🎉🎉</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as sources.</p> <p>Any questions or suggestions? 👉 Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>